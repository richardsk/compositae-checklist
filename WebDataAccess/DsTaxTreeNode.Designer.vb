'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsTaxTreeNode"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsTaxTreeNode
    Inherits Global.System.Data.DataSet
    
    Private tablesprGetNode As sprGetNodeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sprGetNode")) Is Nothing) Then
                MyBase.Tables.Add(New sprGetNodeDataTable(ds.Tables("sprGetNode")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sprGetNode() As sprGetNodeDataTable
        Get
            Return Me.tablesprGetNode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsTaxTreeNode = CType(MyBase.Clone,DsTaxTreeNode)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sprGetNode")) Is Nothing) Then
                MyBase.Tables.Add(New sprGetNodeDataTable(ds.Tables("sprGetNode")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesprGetNode = CType(MyBase.Tables("sprGetNode"),sprGetNodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesprGetNode) Is Nothing) Then
                Me.tablesprGetNode.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsTaxTreeNode"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TaxTreeNode.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("en-US")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesprGetNode = New sprGetNodeDataTable
        MyBase.Tables.Add(Me.tablesprGetNode)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesprGetNode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsTaxTreeNode = New DsTaxTreeNode
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sprGetNodeRowChangeEventHandler(ByVal sender As Object, ByVal e As sprGetNodeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sprGetNodeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNameCanonical As Global.System.Data.DataColumn
        
        Private columnNameFull As Global.System.Data.DataColumn
        
        Private columnNameOrthographyVariant As Global.System.Data.DataColumn
        
        Private columnNameAuthors As Global.System.Data.DataColumn
        
        Private columnNamePage As Global.System.Data.DataColumn
        
        Private columnNameYearOfPublication As Global.System.Data.DataColumn
        
        Private columnNameYearOnPublication As Global.System.Data.DataColumn
        
        Private columnNameInCitation As Global.System.Data.DataColumn
        
        Private columnNameMisapplied As Global.System.Data.DataColumn
        
        Private columnNameDubium As Global.System.Data.DataColumn
        
        Private columnNameProParte As Global.System.Data.DataColumn
        
        Private columnNameNovum As Global.System.Data.DataColumn
        
        Private columnNameInvalid As Global.System.Data.DataColumn
        
        Private columnNameIllegitimate As Global.System.Data.DataColumn
        
        Private columnNameAutonym As Global.System.Data.DataColumn
        
        Private columnNameAggregate As Global.System.Data.DataColumn
        
        Private columnNameClassificationFK As Global.System.Data.DataColumn
        
        Private columnNameIsAnamorph As Global.System.Data.DataColumn
        
        Private columnNameTypeLocality As Global.System.Data.DataColumn
        
        Private columnNameSanctioningAuthor As Global.System.Data.DataColumn
        
        Private columnNameSanctioningPage As Global.System.Data.DataColumn
        
        Private columnNameHybridLink As Global.System.Data.DataColumn
        
        Private columnNameCheckStatus As Global.System.Data.DataColumn
        
        Private columnNameOwner As Global.System.Data.DataColumn
        
        Private columnNameNomCode As Global.System.Data.DataColumn
        
        Private columnNameSuppress As Global.System.Data.DataColumn
        
        Private columnNameAddedBy As Global.System.Data.DataColumn
        
        Private columnNameAddedDate As Global.System.Data.DataColumn
        
        Private columnNameUpdatedBy As Global.System.Data.DataColumn
        
        Private columnNameUpdatedDate As Global.System.Data.DataColumn
        
        Private columnNameAddedByFK As Global.System.Data.DataColumn
        
        Private columnNameUpdatedByFK As Global.System.Data.DataColumn
        
        Private columnNameTempRepKey As Global.System.Data.DataColumn
        
        Private columnNameGuid As Global.System.Data.DataColumn
        
        Private columnNameTaxonRankFk As Global.System.Data.DataColumn
        
        Private columnNameReferenceFK As Global.System.Data.DataColumn
        
        Private columnNameTaxonomyReferenceFK As Global.System.Data.DataColumn
        
        Private columnNameSanctioningReferenceFK As Global.System.Data.DataColumn
        
        Private columnNameParentFK As Global.System.Data.DataColumn
        
        Private columnNameCurrentFK As Global.System.Data.DataColumn
        
        Private columnNameBasionymFK As Global.System.Data.DataColumn
        
        Private columnNameBasedOnFK As Global.System.Data.DataColumn
        
        Private columnNameBlockingFK As Global.System.Data.DataColumn
        
        Private columnNameAnamorphGenusFK As Global.System.Data.DataColumn
        
        Private columnNameTypeTaxonFK As Global.System.Data.DataColumn
        
        Private columnTaxonRankPk As Global.System.Data.DataColumn
        
        Private columnTaxonRankName As Global.System.Data.DataColumn
        
        Private columnTaxonRankSort As Global.System.Data.DataColumn
        
        Private columnTaxonRankFullName As Global.System.Data.DataColumn
        
        Private columnTaxonRankColumnText As Global.System.Data.DataColumn
        
        Private columnTaxonRankShowRank As Global.System.Data.DataColumn
        
        Private columnChildCount As Global.System.Data.DataColumn
        
        Private columnPermissionsPk As Global.System.Data.DataColumn
        
        Private columnPermissionsRead As Global.System.Data.DataColumn
        
        Private columnPermissionsWrite As Global.System.Data.DataColumn
        
        Private columnPermissionsAddChildren As Global.System.Data.DataColumn
        
        Private columnPermissionsChangeLinks As Global.System.Data.DataColumn
        
        Private columnPermissionsModifyPermission As Global.System.Data.DataColumn
        
        Private columnPermissionsMerge As Global.System.Data.DataColumn
        
        Private columnPermissionsDelete As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsPk As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsRead As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsWrite As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsAddChildren As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsChangeLinks As Global.System.Data.DataColumn
        
        Private columnInheritedPermissionsModifyPermission As Global.System.Data.DataColumn
        
        Private columnNameLSID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sprGetNode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameCanonicalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameCanonical
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameFullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameFull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameOrthographyVariantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameOrthographyVariant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAuthorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAuthors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NamePageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNamePage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameYearOfPublicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameYearOfPublication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameYearOnPublicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameYearOnPublication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameInCitationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameInCitation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameMisappliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameMisapplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameDubiumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameDubium
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameProParteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameProParte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameNovumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameNovum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameInvalidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameInvalid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameIllegitimateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameIllegitimate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAutonymColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAutonym
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAggregateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAggregate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameClassificationFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameClassificationFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameIsAnamorphColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameIsAnamorph
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTypeLocalityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTypeLocality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameSanctioningAuthorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameSanctioningAuthor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameSanctioningPageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameSanctioningPage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameHybridLinkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameHybridLink
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameCheckStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameCheckStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameOwnerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameOwner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameNomCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameNomCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameSuppressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameSuppress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAddedByFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAddedByFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameUpdatedByFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameUpdatedByFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTempRepKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTempRepKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameGuidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameGuid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTaxonRankFkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTaxonRankFk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameReferenceFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameReferenceFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTaxonomyReferenceFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTaxonomyReferenceFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameSanctioningReferenceFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameSanctioningReferenceFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameParentFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameParentFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameCurrentFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameCurrentFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameBasionymFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameBasionymFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameBasedOnFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameBasedOnFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameBlockingFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameBlockingFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameAnamorphGenusFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameAnamorphGenusFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTypeTaxonFKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTypeTaxonFK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankPkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankPk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankSortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankSort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankFullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankColumnTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankColumnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TaxonRankShowRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxonRankShowRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChildCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChildCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsPkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsPk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsReadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsRead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsWriteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsWrite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsAddChildrenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsAddChildren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsChangeLinksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsChangeLinks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsModifyPermissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsModifyPermission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsMergeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsMerge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermissionsDeleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermissionsDelete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsPkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsPk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsReadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsRead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsWriteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsWrite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsAddChildrenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsAddChildren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsChangeLinksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsChangeLinks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InheritedPermissionsModifyPermissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInheritedPermissionsModifyPermission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameLSIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameLSID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sprGetNodeRow
            Get
                Return CType(Me.Rows(index),sprGetNodeRow)
            End Get
        End Property
        
        Public Event sprGetNodeRowChanging As sprGetNodeRowChangeEventHandler
        
        Public Event sprGetNodeRowChanged As sprGetNodeRowChangeEventHandler
        
        Public Event sprGetNodeRowDeleting As sprGetNodeRowChangeEventHandler
        
        Public Event sprGetNodeRowDeleted As sprGetNodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddsprGetNodeRow(ByVal row As sprGetNodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddsprGetNodeRow( _
                    ByVal NameCanonical As String,  _
                    ByVal NameFull As String,  _
                    ByVal NameOrthographyVariant As String,  _
                    ByVal NameAuthors As String,  _
                    ByVal NamePage As String,  _
                    ByVal NameYearOfPublication As String,  _
                    ByVal NameYearOnPublication As String,  _
                    ByVal NameInCitation As Boolean,  _
                    ByVal NameMisapplied As Boolean,  _
                    ByVal NameDubium As Boolean,  _
                    ByVal NameProParte As Boolean,  _
                    ByVal NameNovum As Boolean,  _
                    ByVal NameInvalid As Boolean,  _
                    ByVal NameIllegitimate As Boolean,  _
                    ByVal NameAutonym As Boolean,  _
                    ByVal NameAggregate As Boolean,  _
                    ByVal NameClassificationFK As Integer,  _
                    ByVal NameIsAnamorph As Boolean,  _
                    ByVal NameTypeLocality As String,  _
                    ByVal NameSanctioningAuthor As String,  _
                    ByVal NameSanctioningPage As String,  _
                    ByVal NameHybridLink As String,  _
                    ByVal NameCheckStatus As Integer,  _
                    ByVal NameOwner As String,  _
                    ByVal NameNomCode As String,  _
                    ByVal NameSuppress As Boolean,  _
                    ByVal NameAddedBy As String,  _
                    ByVal NameAddedDate As Date,  _
                    ByVal NameUpdatedBy As String,  _
                    ByVal NameUpdatedDate As Date,  _
                    ByVal NameAddedByFK As Integer,  _
                    ByVal NameUpdatedByFK As Integer,  _
                    ByVal NameTempRepKey As System.Guid,  _
                    ByVal NameGuid As String,  _
                    ByVal NameTaxonRankFk As Integer,  _
                    ByVal NameReferenceFK As String,  _
                    ByVal NameTaxonomyReferenceFK As String,  _
                    ByVal NameSanctioningReferenceFK As String,  _
                    ByVal NameParentFK As String,  _
                    ByVal NameCurrentFK As String,  _
                    ByVal NameBasionymFK As String,  _
                    ByVal NameBasedOnFK As String,  _
                    ByVal NameBlockingFK As String,  _
                    ByVal NameAnamorphGenusFK As String,  _
                    ByVal NameTypeTaxonFK As String,  _
                    ByVal TaxonRankPk As Integer,  _
                    ByVal TaxonRankName As String,  _
                    ByVal TaxonRankSort As Integer,  _
                    ByVal TaxonRankFullName As String,  _
                    ByVal TaxonRankColumnText As String,  _
                    ByVal TaxonRankShowRank As Boolean,  _
                    ByVal ChildCount As Integer,  _
                    ByVal PermissionsPk As Integer,  _
                    ByVal PermissionsRead As Boolean,  _
                    ByVal PermissionsWrite As Boolean,  _
                    ByVal PermissionsAddChildren As Boolean,  _
                    ByVal PermissionsChangeLinks As Boolean,  _
                    ByVal PermissionsModifyPermission As Boolean,  _
                    ByVal PermissionsMerge As Boolean,  _
                    ByVal PermissionsDelete As Boolean,  _
                    ByVal InheritedPermissionsPk As Integer,  _
                    ByVal InheritedPermissionsRead As Boolean,  _
                    ByVal InheritedPermissionsWrite As Boolean,  _
                    ByVal InheritedPermissionsAddChildren As Boolean,  _
                    ByVal InheritedPermissionsChangeLinks As Boolean,  _
                    ByVal InheritedPermissionsModifyPermission As Boolean,  _
                    ByVal NameLSID As String) As sprGetNodeRow
            Dim rowsprGetNodeRow As sprGetNodeRow = CType(Me.NewRow,sprGetNodeRow)
            Dim columnValuesArray() As Object = New Object() {NameCanonical, NameFull, NameOrthographyVariant, NameAuthors, NamePage, NameYearOfPublication, NameYearOnPublication, NameInCitation, NameMisapplied, NameDubium, NameProParte, NameNovum, NameInvalid, NameIllegitimate, NameAutonym, NameAggregate, NameClassificationFK, NameIsAnamorph, NameTypeLocality, NameSanctioningAuthor, NameSanctioningPage, NameHybridLink, NameCheckStatus, NameOwner, NameNomCode, NameSuppress, NameAddedBy, NameAddedDate, NameUpdatedBy, NameUpdatedDate, NameAddedByFK, NameUpdatedByFK, NameTempRepKey, NameGuid, NameTaxonRankFk, NameReferenceFK, NameTaxonomyReferenceFK, NameSanctioningReferenceFK, NameParentFK, NameCurrentFK, NameBasionymFK, NameBasedOnFK, NameBlockingFK, NameAnamorphGenusFK, NameTypeTaxonFK, TaxonRankPk, TaxonRankName, TaxonRankSort, TaxonRankFullName, TaxonRankColumnText, TaxonRankShowRank, ChildCount, PermissionsPk, PermissionsRead, PermissionsWrite, PermissionsAddChildren, PermissionsChangeLinks, PermissionsModifyPermission, PermissionsMerge, PermissionsDelete, InheritedPermissionsPk, InheritedPermissionsRead, InheritedPermissionsWrite, InheritedPermissionsAddChildren, InheritedPermissionsChangeLinks, InheritedPermissionsModifyPermission, NameLSID}
            rowsprGetNodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsprGetNodeRow)
            Return rowsprGetNodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sprGetNodeDataTable = CType(MyBase.Clone,sprGetNodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sprGetNodeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNameCanonical = MyBase.Columns("NameCanonical")
            Me.columnNameFull = MyBase.Columns("NameFull")
            Me.columnNameOrthographyVariant = MyBase.Columns("NameOrthographyVariant")
            Me.columnNameAuthors = MyBase.Columns("NameAuthors")
            Me.columnNamePage = MyBase.Columns("NamePage")
            Me.columnNameYearOfPublication = MyBase.Columns("NameYearOfPublication")
            Me.columnNameYearOnPublication = MyBase.Columns("NameYearOnPublication")
            Me.columnNameInCitation = MyBase.Columns("NameInCitation")
            Me.columnNameMisapplied = MyBase.Columns("NameMisapplied")
            Me.columnNameDubium = MyBase.Columns("NameDubium")
            Me.columnNameProParte = MyBase.Columns("NameProParte")
            Me.columnNameNovum = MyBase.Columns("NameNovum")
            Me.columnNameInvalid = MyBase.Columns("NameInvalid")
            Me.columnNameIllegitimate = MyBase.Columns("NameIllegitimate")
            Me.columnNameAutonym = MyBase.Columns("NameAutonym")
            Me.columnNameAggregate = MyBase.Columns("NameAggregate")
            Me.columnNameClassificationFK = MyBase.Columns("NameClassificationFK")
            Me.columnNameIsAnamorph = MyBase.Columns("NameIsAnamorph")
            Me.columnNameTypeLocality = MyBase.Columns("NameTypeLocality")
            Me.columnNameSanctioningAuthor = MyBase.Columns("NameSanctioningAuthor")
            Me.columnNameSanctioningPage = MyBase.Columns("NameSanctioningPage")
            Me.columnNameHybridLink = MyBase.Columns("NameHybridLink")
            Me.columnNameCheckStatus = MyBase.Columns("NameCheckStatus")
            Me.columnNameOwner = MyBase.Columns("NameOwner")
            Me.columnNameNomCode = MyBase.Columns("NameNomCode")
            Me.columnNameSuppress = MyBase.Columns("NameSuppress")
            Me.columnNameAddedBy = MyBase.Columns("NameAddedBy")
            Me.columnNameAddedDate = MyBase.Columns("NameAddedDate")
            Me.columnNameUpdatedBy = MyBase.Columns("NameUpdatedBy")
            Me.columnNameUpdatedDate = MyBase.Columns("NameUpdatedDate")
            Me.columnNameAddedByFK = MyBase.Columns("NameAddedByFK")
            Me.columnNameUpdatedByFK = MyBase.Columns("NameUpdatedByFK")
            Me.columnNameTempRepKey = MyBase.Columns("NameTempRepKey")
            Me.columnNameGuid = MyBase.Columns("NameGuid")
            Me.columnNameTaxonRankFk = MyBase.Columns("NameTaxonRankFk")
            Me.columnNameReferenceFK = MyBase.Columns("NameReferenceFK")
            Me.columnNameTaxonomyReferenceFK = MyBase.Columns("NameTaxonomyReferenceFK")
            Me.columnNameSanctioningReferenceFK = MyBase.Columns("NameSanctioningReferenceFK")
            Me.columnNameParentFK = MyBase.Columns("NameParentFK")
            Me.columnNameCurrentFK = MyBase.Columns("NameCurrentFK")
            Me.columnNameBasionymFK = MyBase.Columns("NameBasionymFK")
            Me.columnNameBasedOnFK = MyBase.Columns("NameBasedOnFK")
            Me.columnNameBlockingFK = MyBase.Columns("NameBlockingFK")
            Me.columnNameAnamorphGenusFK = MyBase.Columns("NameAnamorphGenusFK")
            Me.columnNameTypeTaxonFK = MyBase.Columns("NameTypeTaxonFK")
            Me.columnTaxonRankPk = MyBase.Columns("TaxonRankPk")
            Me.columnTaxonRankName = MyBase.Columns("TaxonRankName")
            Me.columnTaxonRankSort = MyBase.Columns("TaxonRankSort")
            Me.columnTaxonRankFullName = MyBase.Columns("TaxonRankFullName")
            Me.columnTaxonRankColumnText = MyBase.Columns("TaxonRankColumnText")
            Me.columnTaxonRankShowRank = MyBase.Columns("TaxonRankShowRank")
            Me.columnChildCount = MyBase.Columns("ChildCount")
            Me.columnPermissionsPk = MyBase.Columns("PermissionsPk")
            Me.columnPermissionsRead = MyBase.Columns("PermissionsRead")
            Me.columnPermissionsWrite = MyBase.Columns("PermissionsWrite")
            Me.columnPermissionsAddChildren = MyBase.Columns("PermissionsAddChildren")
            Me.columnPermissionsChangeLinks = MyBase.Columns("PermissionsChangeLinks")
            Me.columnPermissionsModifyPermission = MyBase.Columns("PermissionsModifyPermission")
            Me.columnPermissionsMerge = MyBase.Columns("PermissionsMerge")
            Me.columnPermissionsDelete = MyBase.Columns("PermissionsDelete")
            Me.columnInheritedPermissionsPk = MyBase.Columns("InheritedPermissionsPk")
            Me.columnInheritedPermissionsRead = MyBase.Columns("InheritedPermissionsRead")
            Me.columnInheritedPermissionsWrite = MyBase.Columns("InheritedPermissionsWrite")
            Me.columnInheritedPermissionsAddChildren = MyBase.Columns("InheritedPermissionsAddChildren")
            Me.columnInheritedPermissionsChangeLinks = MyBase.Columns("InheritedPermissionsChangeLinks")
            Me.columnInheritedPermissionsModifyPermission = MyBase.Columns("InheritedPermissionsModifyPermission")
            Me.columnNameLSID = MyBase.Columns("NameLSID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNameCanonical = New Global.System.Data.DataColumn("NameCanonical", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameCanonical)
            Me.columnNameFull = New Global.System.Data.DataColumn("NameFull", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameFull)
            Me.columnNameOrthographyVariant = New Global.System.Data.DataColumn("NameOrthographyVariant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameOrthographyVariant)
            Me.columnNameAuthors = New Global.System.Data.DataColumn("NameAuthors", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAuthors)
            Me.columnNamePage = New Global.System.Data.DataColumn("NamePage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNamePage)
            Me.columnNameYearOfPublication = New Global.System.Data.DataColumn("NameYearOfPublication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameYearOfPublication)
            Me.columnNameYearOnPublication = New Global.System.Data.DataColumn("NameYearOnPublication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameYearOnPublication)
            Me.columnNameInCitation = New Global.System.Data.DataColumn("NameInCitation", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameInCitation)
            Me.columnNameMisapplied = New Global.System.Data.DataColumn("NameMisapplied", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameMisapplied)
            Me.columnNameDubium = New Global.System.Data.DataColumn("NameDubium", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameDubium)
            Me.columnNameProParte = New Global.System.Data.DataColumn("NameProParte", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameProParte)
            Me.columnNameNovum = New Global.System.Data.DataColumn("NameNovum", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameNovum)
            Me.columnNameInvalid = New Global.System.Data.DataColumn("NameInvalid", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameInvalid)
            Me.columnNameIllegitimate = New Global.System.Data.DataColumn("NameIllegitimate", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameIllegitimate)
            Me.columnNameAutonym = New Global.System.Data.DataColumn("NameAutonym", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAutonym)
            Me.columnNameAggregate = New Global.System.Data.DataColumn("NameAggregate", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAggregate)
            Me.columnNameClassificationFK = New Global.System.Data.DataColumn("NameClassificationFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameClassificationFK)
            Me.columnNameIsAnamorph = New Global.System.Data.DataColumn("NameIsAnamorph", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameIsAnamorph)
            Me.columnNameTypeLocality = New Global.System.Data.DataColumn("NameTypeLocality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTypeLocality)
            Me.columnNameSanctioningAuthor = New Global.System.Data.DataColumn("NameSanctioningAuthor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameSanctioningAuthor)
            Me.columnNameSanctioningPage = New Global.System.Data.DataColumn("NameSanctioningPage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameSanctioningPage)
            Me.columnNameHybridLink = New Global.System.Data.DataColumn("NameHybridLink", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameHybridLink)
            Me.columnNameCheckStatus = New Global.System.Data.DataColumn("NameCheckStatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameCheckStatus)
            Me.columnNameOwner = New Global.System.Data.DataColumn("NameOwner", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameOwner)
            Me.columnNameNomCode = New Global.System.Data.DataColumn("NameNomCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameNomCode)
            Me.columnNameSuppress = New Global.System.Data.DataColumn("NameSuppress", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameSuppress)
            Me.columnNameAddedBy = New Global.System.Data.DataColumn("NameAddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAddedBy)
            Me.columnNameAddedDate = New Global.System.Data.DataColumn("NameAddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAddedDate)
            Me.columnNameUpdatedBy = New Global.System.Data.DataColumn("NameUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameUpdatedBy)
            Me.columnNameUpdatedDate = New Global.System.Data.DataColumn("NameUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameUpdatedDate)
            Me.columnNameAddedByFK = New Global.System.Data.DataColumn("NameAddedByFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAddedByFK)
            Me.columnNameUpdatedByFK = New Global.System.Data.DataColumn("NameUpdatedByFK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameUpdatedByFK)
            Me.columnNameTempRepKey = New Global.System.Data.DataColumn("NameTempRepKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTempRepKey)
            Me.columnNameGuid = New Global.System.Data.DataColumn("NameGuid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameGuid)
            Me.columnNameTaxonRankFk = New Global.System.Data.DataColumn("NameTaxonRankFk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTaxonRankFk)
            Me.columnNameReferenceFK = New Global.System.Data.DataColumn("NameReferenceFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameReferenceFK)
            Me.columnNameTaxonomyReferenceFK = New Global.System.Data.DataColumn("NameTaxonomyReferenceFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTaxonomyReferenceFK)
            Me.columnNameSanctioningReferenceFK = New Global.System.Data.DataColumn("NameSanctioningReferenceFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameSanctioningReferenceFK)
            Me.columnNameParentFK = New Global.System.Data.DataColumn("NameParentFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameParentFK)
            Me.columnNameCurrentFK = New Global.System.Data.DataColumn("NameCurrentFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameCurrentFK)
            Me.columnNameBasionymFK = New Global.System.Data.DataColumn("NameBasionymFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameBasionymFK)
            Me.columnNameBasedOnFK = New Global.System.Data.DataColumn("NameBasedOnFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameBasedOnFK)
            Me.columnNameBlockingFK = New Global.System.Data.DataColumn("NameBlockingFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameBlockingFK)
            Me.columnNameAnamorphGenusFK = New Global.System.Data.DataColumn("NameAnamorphGenusFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameAnamorphGenusFK)
            Me.columnNameTypeTaxonFK = New Global.System.Data.DataColumn("NameTypeTaxonFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTypeTaxonFK)
            Me.columnTaxonRankPk = New Global.System.Data.DataColumn("TaxonRankPk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankPk)
            Me.columnTaxonRankName = New Global.System.Data.DataColumn("TaxonRankName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankName)
            Me.columnTaxonRankSort = New Global.System.Data.DataColumn("TaxonRankSort", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankSort)
            Me.columnTaxonRankFullName = New Global.System.Data.DataColumn("TaxonRankFullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankFullName)
            Me.columnTaxonRankColumnText = New Global.System.Data.DataColumn("TaxonRankColumnText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankColumnText)
            Me.columnTaxonRankShowRank = New Global.System.Data.DataColumn("TaxonRankShowRank", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxonRankShowRank)
            Me.columnChildCount = New Global.System.Data.DataColumn("ChildCount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChildCount)
            Me.columnPermissionsPk = New Global.System.Data.DataColumn("PermissionsPk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsPk)
            Me.columnPermissionsRead = New Global.System.Data.DataColumn("PermissionsRead", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsRead)
            Me.columnPermissionsWrite = New Global.System.Data.DataColumn("PermissionsWrite", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsWrite)
            Me.columnPermissionsAddChildren = New Global.System.Data.DataColumn("PermissionsAddChildren", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsAddChildren)
            Me.columnPermissionsChangeLinks = New Global.System.Data.DataColumn("PermissionsChangeLinks", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsChangeLinks)
            Me.columnPermissionsModifyPermission = New Global.System.Data.DataColumn("PermissionsModifyPermission", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsModifyPermission)
            Me.columnPermissionsMerge = New Global.System.Data.DataColumn("PermissionsMerge", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsMerge)
            Me.columnPermissionsDelete = New Global.System.Data.DataColumn("PermissionsDelete", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermissionsDelete)
            Me.columnInheritedPermissionsPk = New Global.System.Data.DataColumn("InheritedPermissionsPk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsPk)
            Me.columnInheritedPermissionsRead = New Global.System.Data.DataColumn("InheritedPermissionsRead", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsRead)
            Me.columnInheritedPermissionsWrite = New Global.System.Data.DataColumn("InheritedPermissionsWrite", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsWrite)
            Me.columnInheritedPermissionsAddChildren = New Global.System.Data.DataColumn("InheritedPermissionsAddChildren", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsAddChildren)
            Me.columnInheritedPermissionsChangeLinks = New Global.System.Data.DataColumn("InheritedPermissionsChangeLinks", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsChangeLinks)
            Me.columnInheritedPermissionsModifyPermission = New Global.System.Data.DataColumn("InheritedPermissionsModifyPermission", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInheritedPermissionsModifyPermission)
            Me.columnNameLSID = New Global.System.Data.DataColumn("NameLSID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameLSID)
            Me.columnNameCanonical.AllowDBNull = false
            Me.columnNameInCitation.AllowDBNull = false
            Me.columnNameMisapplied.AllowDBNull = false
            Me.columnNameDubium.AllowDBNull = false
            Me.columnNameProParte.AllowDBNull = false
            Me.columnNameNovum.AllowDBNull = false
            Me.columnNameInvalid.AllowDBNull = false
            Me.columnNameIllegitimate.AllowDBNull = false
            Me.columnNameIsAnamorph.AllowDBNull = false
            Me.columnNameSuppress.AllowDBNull = false
            Me.columnNameGuid.AllowDBNull = false
            Me.columnNameTaxonRankFk.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewsprGetNodeRow() As sprGetNodeRow
            Return CType(Me.NewRow,sprGetNodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sprGetNodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sprGetNodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sprGetNodeRowChangedEvent) Is Nothing) Then
                RaiseEvent sprGetNodeRowChanged(Me, New sprGetNodeRowChangeEvent(CType(e.Row,sprGetNodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sprGetNodeRowChangingEvent) Is Nothing) Then
                RaiseEvent sprGetNodeRowChanging(Me, New sprGetNodeRowChangeEvent(CType(e.Row,sprGetNodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sprGetNodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent sprGetNodeRowDeleted(Me, New sprGetNodeRowChangeEvent(CType(e.Row,sprGetNodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sprGetNodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent sprGetNodeRowDeleting(Me, New sprGetNodeRowChangeEvent(CType(e.Row,sprGetNodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovesprGetNodeRow(ByVal row As sprGetNodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsTaxTreeNode = New DsTaxTreeNode
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sprGetNodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sprGetNodeRow
        Inherits Global.System.Data.DataRow
        
        Private tablesprGetNode As sprGetNodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesprGetNode = CType(Me.Table,sprGetNodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameCanonical() As String
            Get
                Return CType(Me(Me.tablesprGetNode.NameCanonicalColumn),String)
            End Get
            Set
                Me(Me.tablesprGetNode.NameCanonicalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameFull() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameFullColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameFull' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameFullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameOrthographyVariant() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameOrthographyVariantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameOrthographyVariant' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameOrthographyVariantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAuthors() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAuthorsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAuthors' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAuthorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NamePage() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NamePageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NamePage' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NamePageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameYearOfPublication() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameYearOfPublicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameYearOfPublication' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameYearOfPublicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameYearOnPublication() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameYearOnPublicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameYearOnPublication' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameYearOnPublicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameInCitation() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameInCitationColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameInCitationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameMisapplied() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameMisappliedColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameMisappliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameDubium() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameDubiumColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameDubiumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameProParte() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameProParteColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameProParteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameNovum() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameNovumColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameNovumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameInvalid() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameInvalidColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameInvalidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameIllegitimate() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameIllegitimateColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameIllegitimateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAutonym() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAutonymColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAutonym' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAutonymColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAggregate() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAggregateColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAggregate' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAggregateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameClassificationFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameClassificationFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameClassificationFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameClassificationFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameIsAnamorph() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameIsAnamorphColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameIsAnamorphColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTypeLocality() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameTypeLocalityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameTypeLocality' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameTypeLocalityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameSanctioningAuthor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameSanctioningAuthorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameSanctioningAuthor' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameSanctioningAuthorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameSanctioningPage() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameSanctioningPageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameSanctioningPage' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameSanctioningPageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameHybridLink() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameHybridLinkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameHybridLink' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameHybridLinkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameCheckStatus() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameCheckStatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameCheckStatus' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameCheckStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameOwner() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameOwnerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameOwner' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameOwnerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameNomCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameNomCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameNomCode' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameNomCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameSuppress() As Boolean
            Get
                Return CType(Me(Me.tablesprGetNode.NameSuppressColumn),Boolean)
            End Get
            Set
                Me(Me.tablesprGetNode.NameSuppressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAddedBy' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAddedDate' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameUpdatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameUpdatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameUpdatedBy' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameUpdatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameUpdatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameUpdatedDate' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameUpdatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAddedByFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAddedByFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAddedByFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAddedByFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameUpdatedByFK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameUpdatedByFKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameUpdatedByFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameUpdatedByFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTempRepKey() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameTempRepKeyColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameTempRepKey' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameTempRepKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameGuid() As String
            Get
                Return CType(Me(Me.tablesprGetNode.NameGuidColumn),String)
            End Get
            Set
                Me(Me.tablesprGetNode.NameGuidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTaxonRankFk() As Integer
            Get
                Return CType(Me(Me.tablesprGetNode.NameTaxonRankFkColumn),Integer)
            End Get
            Set
                Me(Me.tablesprGetNode.NameTaxonRankFkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameReferenceFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameReferenceFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameReferenceFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameReferenceFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTaxonomyReferenceFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameTaxonomyReferenceFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameTaxonomyReferenceFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameTaxonomyReferenceFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameSanctioningReferenceFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameSanctioningReferenceFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameSanctioningReferenceFK' in table 'sprGetNode' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameSanctioningReferenceFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameParentFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameParentFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameParentFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameParentFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameCurrentFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameCurrentFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameCurrentFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameCurrentFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameBasionymFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameBasionymFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameBasionymFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameBasionymFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameBasedOnFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameBasedOnFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameBasedOnFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameBasedOnFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameBlockingFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameBlockingFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameBlockingFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameBlockingFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameAnamorphGenusFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameAnamorphGenusFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameAnamorphGenusFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameAnamorphGenusFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTypeTaxonFK() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameTypeTaxonFKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameTypeTaxonFK' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameTypeTaxonFKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankPk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankPkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankPk' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankPkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankName' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankSort() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankSortColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankSort' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankSortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankFullName() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankFullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankFullName' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankFullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankColumnText() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankColumnTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankColumnText' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankColumnTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TaxonRankShowRank() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.TaxonRankShowRankColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxonRankShowRank' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.TaxonRankShowRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChildCount() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.ChildCountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChildCount' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.ChildCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsPk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsPkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsPk' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsPkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsRead() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsReadColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsRead' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsReadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsWrite() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsWriteColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsWrite' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsWriteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsAddChildren() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsAddChildrenColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsAddChildren' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsAddChildrenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsChangeLinks() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsChangeLinksColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsChangeLinks' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsChangeLinksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsModifyPermission() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsModifyPermissionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsModifyPermission' in table 'sprGetNode' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsModifyPermissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsMerge() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsMergeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsMerge' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsMergeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermissionsDelete() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.PermissionsDeleteColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermissionsDelete' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.PermissionsDeleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsPk() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsPkColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsPk' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsPkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsRead() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsReadColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsRead' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsReadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsWrite() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsWriteColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsWrite' in table 'sprGetNode' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsWriteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsAddChildren() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsAddChildrenColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsAddChildren' in table 'sprGetNode' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsAddChildrenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsChangeLinks() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsChangeLinksColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsChangeLinks' in table 'sprGetNode' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsChangeLinksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InheritedPermissionsModifyPermission() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.InheritedPermissionsModifyPermissionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InheritedPermissionsModifyPermission' in table 'sprGetNode'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.InheritedPermissionsModifyPermissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameLSID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesprGetNode.NameLSIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameLSID' in table 'sprGetNode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesprGetNode.NameLSIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameFullNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameFullColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameFullNull()
            Me(Me.tablesprGetNode.NameFullColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameOrthographyVariantNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameOrthographyVariantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameOrthographyVariantNull()
            Me(Me.tablesprGetNode.NameOrthographyVariantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAuthorsNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAuthorsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAuthorsNull()
            Me(Me.tablesprGetNode.NameAuthorsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNamePageNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NamePageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNamePageNull()
            Me(Me.tablesprGetNode.NamePageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameYearOfPublicationNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameYearOfPublicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameYearOfPublicationNull()
            Me(Me.tablesprGetNode.NameYearOfPublicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameYearOnPublicationNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameYearOnPublicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameYearOnPublicationNull()
            Me(Me.tablesprGetNode.NameYearOnPublicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAutonymNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAutonymColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAutonymNull()
            Me(Me.tablesprGetNode.NameAutonymColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAggregateNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAggregateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAggregateNull()
            Me(Me.tablesprGetNode.NameAggregateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameClassificationFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameClassificationFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameClassificationFKNull()
            Me(Me.tablesprGetNode.NameClassificationFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameTypeLocalityNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameTypeLocalityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameTypeLocalityNull()
            Me(Me.tablesprGetNode.NameTypeLocalityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameSanctioningAuthorNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameSanctioningAuthorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameSanctioningAuthorNull()
            Me(Me.tablesprGetNode.NameSanctioningAuthorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameSanctioningPageNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameSanctioningPageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameSanctioningPageNull()
            Me(Me.tablesprGetNode.NameSanctioningPageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameHybridLinkNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameHybridLinkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameHybridLinkNull()
            Me(Me.tablesprGetNode.NameHybridLinkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameCheckStatusNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameCheckStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameCheckStatusNull()
            Me(Me.tablesprGetNode.NameCheckStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameOwnerNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameOwnerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameOwnerNull()
            Me(Me.tablesprGetNode.NameOwnerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNomCodeNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameNomCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNomCodeNull()
            Me(Me.tablesprGetNode.NameNomCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAddedByNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAddedByNull()
            Me(Me.tablesprGetNode.NameAddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAddedDateNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAddedDateNull()
            Me(Me.tablesprGetNode.NameAddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameUpdatedByNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameUpdatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameUpdatedByNull()
            Me(Me.tablesprGetNode.NameUpdatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameUpdatedDateNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameUpdatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameUpdatedDateNull()
            Me(Me.tablesprGetNode.NameUpdatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAddedByFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAddedByFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAddedByFKNull()
            Me(Me.tablesprGetNode.NameAddedByFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameUpdatedByFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameUpdatedByFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameUpdatedByFKNull()
            Me(Me.tablesprGetNode.NameUpdatedByFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameTempRepKeyNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameTempRepKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameTempRepKeyNull()
            Me(Me.tablesprGetNode.NameTempRepKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameReferenceFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameReferenceFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameReferenceFKNull()
            Me(Me.tablesprGetNode.NameReferenceFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameTaxonomyReferenceFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameTaxonomyReferenceFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameTaxonomyReferenceFKNull()
            Me(Me.tablesprGetNode.NameTaxonomyReferenceFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameSanctioningReferenceFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameSanctioningReferenceFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameSanctioningReferenceFKNull()
            Me(Me.tablesprGetNode.NameSanctioningReferenceFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameParentFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameParentFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameParentFKNull()
            Me(Me.tablesprGetNode.NameParentFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameCurrentFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameCurrentFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameCurrentFKNull()
            Me(Me.tablesprGetNode.NameCurrentFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameBasionymFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameBasionymFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameBasionymFKNull()
            Me(Me.tablesprGetNode.NameBasionymFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameBasedOnFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameBasedOnFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameBasedOnFKNull()
            Me(Me.tablesprGetNode.NameBasedOnFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameBlockingFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameBlockingFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameBlockingFKNull()
            Me(Me.tablesprGetNode.NameBlockingFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameAnamorphGenusFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameAnamorphGenusFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameAnamorphGenusFKNull()
            Me(Me.tablesprGetNode.NameAnamorphGenusFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameTypeTaxonFKNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameTypeTaxonFKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameTypeTaxonFKNull()
            Me(Me.tablesprGetNode.NameTypeTaxonFKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankPkNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankPkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankPkNull()
            Me(Me.tablesprGetNode.TaxonRankPkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankNameNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankNameNull()
            Me(Me.tablesprGetNode.TaxonRankNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankSortNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankSortColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankSortNull()
            Me(Me.tablesprGetNode.TaxonRankSortColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankFullNameNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankFullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankFullNameNull()
            Me(Me.tablesprGetNode.TaxonRankFullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankColumnTextNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankColumnTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankColumnTextNull()
            Me(Me.tablesprGetNode.TaxonRankColumnTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTaxonRankShowRankNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.TaxonRankShowRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTaxonRankShowRankNull()
            Me(Me.tablesprGetNode.TaxonRankShowRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChildCountNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.ChildCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChildCountNull()
            Me(Me.tablesprGetNode.ChildCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsPkNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsPkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsPkNull()
            Me(Me.tablesprGetNode.PermissionsPkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsReadNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsReadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsReadNull()
            Me(Me.tablesprGetNode.PermissionsReadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsWriteNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsWriteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsWriteNull()
            Me(Me.tablesprGetNode.PermissionsWriteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsAddChildrenNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsAddChildrenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsAddChildrenNull()
            Me(Me.tablesprGetNode.PermissionsAddChildrenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsChangeLinksNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsChangeLinksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsChangeLinksNull()
            Me(Me.tablesprGetNode.PermissionsChangeLinksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsModifyPermissionNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsModifyPermissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsModifyPermissionNull()
            Me(Me.tablesprGetNode.PermissionsModifyPermissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsMergeNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsMergeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsMergeNull()
            Me(Me.tablesprGetNode.PermissionsMergeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermissionsDeleteNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.PermissionsDeleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermissionsDeleteNull()
            Me(Me.tablesprGetNode.PermissionsDeleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsPkNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsPkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsPkNull()
            Me(Me.tablesprGetNode.InheritedPermissionsPkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsReadNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsReadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsReadNull()
            Me(Me.tablesprGetNode.InheritedPermissionsReadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsWriteNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsWriteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsWriteNull()
            Me(Me.tablesprGetNode.InheritedPermissionsWriteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsAddChildrenNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsAddChildrenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsAddChildrenNull()
            Me(Me.tablesprGetNode.InheritedPermissionsAddChildrenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsChangeLinksNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsChangeLinksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsChangeLinksNull()
            Me(Me.tablesprGetNode.InheritedPermissionsChangeLinksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInheritedPermissionsModifyPermissionNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.InheritedPermissionsModifyPermissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInheritedPermissionsModifyPermissionNull()
            Me(Me.tablesprGetNode.InheritedPermissionsModifyPermissionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameLSIDNull() As Boolean
            Return Me.IsNull(Me.tablesprGetNode.NameLSIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameLSIDNull()
            Me(Me.tablesprGetNode.NameLSIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sprGetNodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sprGetNodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sprGetNodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sprGetNodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
